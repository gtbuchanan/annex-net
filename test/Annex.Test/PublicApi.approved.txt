namespace Annex.Booleans.Global
{
    public enum BoundType
    {
        Include = 0,
        Exclude = 1,
        IncludeExclude = 2,
        ExcludeInclude = 3,
    }
    public class static GlobalBooleanExtensions
    {
        public static bool In<TValue, TComparand>(this TValue @this, params TComparand[] comparands)
            where TValue : TComparand { }
        public static bool In<TValue, TComparand>(this TValue @this, System.Collections.Generic.IEqualityComparer<TComparand> comparer, params TComparand[] comparands)
            where TValue : TComparand { }
        public static bool InRange<T>(this T @this, T bound1, T bound2) { }
        public static bool InRange<T>(this T @this, T bound1, T bound2, Annex.Booleans.Global.BoundType boundType) { }
        public static bool InRange<T>(this T @this, T bound1, T bound2, System.Collections.Generic.IComparer<T> comparer) { }
        public static bool InRange<T>(this T @this, T bound1, T bound2, Annex.Booleans.Global.BoundType boundType, System.Collections.Generic.IComparer<T> comparer) { }
    }
}
namespace Annex.Collections
{
    public class static CollectionExtensions
    {
        public static void AddRange<T>(this System.Collections.Generic.ICollection<T> @this, System.Collections.Generic.IEnumerable<T> collection) { }
    }
    public class static DictionaryExtensions
    {
        public static TValue GetValueOrDefault<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue> @this, TKey key) { }
        public static TValue GetValueOrDefault<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue> @this, TKey key, TValue defaultValue) { }
        public static System.Collections.Specialized.NameValueCollection ToNameValueCollection(this System.Collections.Generic.IDictionary<string, System.Collections.Generic.IEnumerable<string>> @this) { }
    }
    public class static NameValueCollectionExtensions
    {
        public static System.Linq.ILookup<string, string> ToLookup(this System.Collections.Specialized.NameValueCollection @this) { }
    }
}
namespace Annex.Collections.Global
{
    public class static GlobalCollectionExtensions
    {
        public static T AddTo<T, TElement>(this T @this, System.Collections.Generic.ICollection<TElement> collection)
            where T : TElement { }
    }
}
namespace Annex.Delegates
{
    public class static ActionEx
    {
        public static System.Action Empty { get; }
    }
}
namespace Annex.Global
{
    public class static GlobalClassExtensions
    {
        public static T NullIf<T>(this T @this, T value)
            where T :  class { }
        public static T NullIf<T>(this T @this, T value, System.Collections.Generic.IEqualityComparer<T> comparer)
            where T :  class { }
    }
    public class static GlobalStructExtensions
    {
        public static System.Nullable<T> NullIf<T>(this T @this, T value)
            where T :  struct { }
        public static System.Nullable<T> NullIf<T>(this T @this, T value, System.Collections.Generic.IEqualityComparer<T> comparer)
            where T :  struct { }
        public static System.Nullable<T> NullIfDefault<T>(this T @this)
            where T :  struct { }
    }
}
namespace Annex.Linq
{
    public sealed class EnumerableComparer<T> : System.Collections.Generic.IEqualityComparer<System.Collections.Generic.IEnumerable<T>>
    {
        public static Annex.Linq.EnumerableComparer<T> Default { get; }
        public bool Equals(System.Collections.Generic.IEnumerable<T> x, System.Collections.Generic.IEnumerable<T> y) { }
        public int GetHashCode(System.Collections.Generic.IEnumerable<T> obj) { }
    }
    public class static EnumerableExtensions
    {
        public static T RandomElement<T>(this System.Collections.Generic.IEnumerable<T> @this, System.Random random) { }
        public static System.Collections.Generic.IEnumerable<T> Shuffle<T>(this System.Collections.Generic.IEnumerable<T> @this, System.Random random) { }
        public static System.Collections.Generic.IEnumerable<T> TakeRandom<T>(this System.Collections.Generic.IEnumerable<T> @this, int count, System.Random random) { }
    }
    public class static Grouping
    {
        public static System.Linq.IGrouping<TKey, TElement> Create<TKey, TElement>(TKey key, System.Collections.Generic.IEnumerable<TElement> values) { }
        public static System.Linq.IGrouping<TKey, TElement> Empty<TKey, TElement>(TKey key = null) { }
    }
    public class static LookupExtensions
    {
        public static System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IEnumerable<TElement>> ToDictionary<TKey, TElement>(this System.Linq.ILookup<TKey, TElement> @this) { }
    }
}
namespace Annex.Numerics
{
    public class static DoubleEx
    {
        public const double MinNormal = 2.2250738585072014E-308D;
    }
    public class static DoubleExtensions
    {
        public static bool NearlyEquals(this double @this, double value, double epsilon) { }
        public static string ToExactString(this double @this) { }
    }
    public class static FloatEx
    {
        public const float MinNormal = 1.175494E-38F;
    }
    public class static FloatExtensions
    {
        public static bool NearlyEquals(this float @this, float value, double epsilon) { }
        public static string ToExactString(this float @this) { }
    }
    [System.FlagsAttribute()]
    public enum NumericClass : byte
    {
        Integral = 1,
        FloatingPoint = 2,
        Complex = 4,
        Vector = 8,
        All = 15,
    }
}
namespace Annex.Reflection
{
    public class static TypeExtensions
    {
        public static bool IsNumeric(this System.Type @this) { }
        public static bool IsNumeric(this System.Type @this, Annex.Numerics.NumericClass numericClass) { }
        public static System.Type UnwrapNullable(this System.Type @this) { }
    }
}
namespace Annex.Security
{
    public sealed class CryptoRandom : System.Random, System.IDisposable
    {
        public CryptoRandom() { }
        public CryptoRandom(System.Security.Cryptography.RandomNumberGenerator generator) { }
        public void Dispose() { }
        public override int Next() { }
        public override int Next(int maxValue) { }
        public override int Next(int minValue, int maxValue) { }
        public override void NextBytes(byte[] buffer) { }
        public override double NextDouble() { }
    }
}
namespace Annex.Strings
{
    public class static StringExtensions
    {
        public static bool Contains(this string @this, string value, System.StringComparison comparisonType) { }
        public static string NullIfEmpty(this string @this) { }
        public static string NullIfWhiteSpace(this string @this) { }
    }
}
namespace Annex.Threading
{
    public class static CancellationTokenEx
    {
        public static System.Threading.CancellationToken Canceled { get; }
    }
}
namespace Annex.Time.Global
{
    public class static GlobalDateTimeExtensions
    {
        public static System.DateTime April(this int day, int year) { }
        public static System.DateTime August(this int day, int year) { }
        public static System.DateTime December(this int day, int year) { }
        public static System.DateTime February(this int day, int year) { }
        public static System.DateTime January(this int day, int year) { }
        public static System.DateTime July(this int day, int year) { }
        public static System.DateTime June(this int day, int year) { }
        public static System.DateTime March(this int day, int year) { }
        public static System.DateTime May(this int day, int year) { }
        public static System.DateTime November(this int day, int year) { }
        public static System.DateTime October(this int day, int year) { }
        public static System.DateTime September(this int day, int year) { }
    }
    public class static GlobalTimeSpanExtensions
    {
        public static System.TimeSpan Days(this int days) { }
        public static System.TimeSpan Hours(this int hours) { }
        public static System.TimeSpan Milliseconds(this int milliseconds) { }
        public static System.TimeSpan Minutes(this int minutes) { }
        public static System.TimeSpan Seconds(this int seconds) { }
        public static System.TimeSpan Ticks(this int ticks) { }
    }
}
namespace Annex.Uris
{
    public class static UriExtensions
    {
        public static System.Linq.ILookup<string, string> ParseQueryString(this System.Uri @this) { }
    }
}