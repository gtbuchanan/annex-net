namespace Annex.Collections
{
    public static class CollectionExtensions
    {
        public static void AddRange<T>(this System.Collections.Generic.ICollection<T> @this, System.Collections.Generic.IEnumerable<T> collection) { }
    }
    public static class DictionaryExtensions
    {
        [return: System.Diagnostics.CodeAnalysis.MaybeNull]
        public static TValue GetValueOrDefault<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue> @this, TKey key)
            where TKey :  notnull { }
        [return: System.Diagnostics.CodeAnalysis.MaybeNull]
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("defaultValue")]
        public static TValue GetValueOrDefault<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue> @this, TKey key, [System.Diagnostics.CodeAnalysis.AllowNull] TValue defaultValue)
            where TKey :  notnull { }
        public static System.Collections.Specialized.NameValueCollection ToNameValueCollection(this System.Collections.Generic.IDictionary<string, System.Collections.Generic.IEnumerable<string>> @this) { }
    }
    public static class NameValueCollectionExtensions
    {
        public static System.Linq.ILookup<string?, string> ToLookup(this System.Collections.Specialized.NameValueCollection @this) { }
    }
}
namespace Annex.Delegates
{
    public static class ActionAnnex
    {
        public static readonly System.Action Empty;
    }
}
namespace Annex.IO
{
    public abstract class BaseStream : System.IO.Stream
    {
        protected BaseStream() { }
        public override bool CanRead { get; }
        public override bool CanSeek { get; }
        public override bool CanWrite { get; }
        public override long Length { get; }
        public override long Position { get; set; }
        public override void Flush() { }
        public override int Read(byte[] buffer, int offset, int count) { }
        public override long Seek(long offset, System.IO.SeekOrigin origin) { }
        public override void SetLength(long value) { }
        public override void Write(byte[] buffer, int offset, int count) { }
    }
    public sealed class TransferStream : Annex.IO.BaseStream
    {
        public TransferStream() { }
        public TransferStream(System.IO.Stream writableStream) { }
        public override bool CanRead { get; }
        public override bool CanWrite { get; }
        public void CompleteWriting() { }
        protected override void Dispose(bool disposing) { }
        public override int Read(byte[] buffer, int offset, int count) { }
        public override void Write(byte[] buffer, int offset, int count) { }
    }
}
namespace Annex.Linq
{
    public sealed class EnumerableComparer<T> : System.Collections.Generic.IEqualityComparer<System.Collections.Generic.IEnumerable<T>>, System.Collections.IEqualityComparer
    {
        public static Annex.Linq.EnumerableComparer<T> Default { get; }
        public bool Equals(System.Collections.Generic.IEnumerable<T>? x, System.Collections.Generic.IEnumerable<T>? y) { }
        public new bool Equals(object? x, object? y) { }
        public int GetHashCode(System.Collections.Generic.IEnumerable<T>? obj) { }
        public int GetHashCode(object? obj) { }
    }
    public static class EnumerableExtensions
    {
        public static T RandomElement<T>(this System.Collections.Generic.IEnumerable<T> @this, System.Random random) { }
        public static System.Collections.Generic.IEnumerable<T> Shuffle<T>(this System.Collections.Generic.IEnumerable<T> @this, System.Random random) { }
        public static System.Collections.Generic.IEnumerable<T> TakeRandom<T>(this System.Collections.Generic.IEnumerable<T> @this, int count, System.Random random) { }
    }
    public static class Grouping
    {
        public static System.Linq.IGrouping<TKey, TElement> Create<TKey, TElement>(TKey key) { }
        public static System.Linq.IGrouping<TKey, TElement> Create<TKey, TElement>(TKey key, System.Collections.Generic.IEnumerable<TElement> values) { }
    }
    public sealed class Grouping<TKey, TElement> : System.Collections.Generic.IEnumerable<TElement>, System.Collections.IEnumerable, System.Linq.IGrouping<TKey, TElement>
    {
        public static readonly System.Linq.IGrouping<TKey?, TElement> Empty;
        public TKey Key { get; }
        public System.Collections.Generic.IEnumerator<TElement> GetEnumerator() { }
    }
    public static class LookupExtensions
    {
        public static System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IEnumerable<TElement>> ToDictionary<TKey, TElement>(this System.Linq.ILookup<TKey, TElement> @this)
            where TKey :  notnull { }
    }
}
namespace Annex.Numerics
{
    public static class DoubleAnnex
    {
        public const double MinNormal = 2.2250738585072014E-308D;
    }
    public static class DoubleExtensions
    {
        public static bool NearlyEquals(this double @this, double value, double epsilon) { }
        public static string ToExactString(this double @this) { }
    }
    public static class FloatAnnex
    {
        public const float MinNormal = 1.175494E-38F;
    }
    public static class FloatExtensions
    {
        public static bool NearlyEquals(this float @this, float value, double epsilon) { }
        public static string ToExactString(this float @this) { }
    }
    [System.Flags]
    public enum NumericClass
    {
        None = 0,
        Integral = 1,
        FloatingPoint = 2,
        Complex = 4,
        Vector = 8,
        All = 15,
    }
}
namespace Annex.Pollution
{
    public static class ClassExtensions
    {
        public static T? NullIf<T>(this T @this, T value)
            where T :  class { }
        public static T? NullIf<T>(this T @this, T value, System.Collections.Generic.IEqualityComparer<T> comparer)
            where T :  class { }
    }
    public static class Extensions
    {
        public static T AddTo<T, TElement>(this T @this, System.Collections.Generic.ICollection<TElement> collection)
            where T :  notnull, TElement { }
        public static bool In<TValue, TComparand>(this TValue @this, params TComparand[] comparands)
            where TValue :  notnull, TComparand { }
        public static bool In<TValue, TComparand>(this TValue @this, System.Collections.Generic.IEqualityComparer<TComparand> comparer, params TComparand[] comparands)
            where TValue : TComparand { }
    }
    public static class StructExtensions
    {
        public static T? NullIf<T>(this T @this, T value)
            where T :  struct { }
        public static T? NullIf<T>(this T @this, T value, System.Collections.Generic.IEqualityComparer<T> comparer)
            where T :  struct { }
        public static T? NullIfDefault<T>(this T @this)
            where T :  struct { }
    }
}
namespace Annex
{
    public static class RandomAnnex
    {
        public static System.Random Shared { get; }
    }
}
namespace Annex.Reflection
{
    public static class TypeExtensions
    {
        public static bool IsNumeric(this System.Type @this) { }
        public static bool IsNumeric(this System.Type @this, Annex.Numerics.NumericClass numericClass) { }
        public static System.Type UnwrapNullable(this System.Type @this) { }
    }
}
namespace Annex.Security
{
    public sealed class CryptoRandom : System.Random, System.IDisposable
    {
        public CryptoRandom() { }
        public CryptoRandom(System.Security.Cryptography.RandomNumberGenerator generator) { }
        public void Dispose() { }
        public override int Next() { }
        public override int Next(int maxValue) { }
        public override int Next(int minValue, int maxValue) { }
        public override void NextBytes(byte[] buffer) { }
        public override double NextDouble() { }
    }
}
namespace Annex.Strings
{
    public static class StringExtensions
    {
        public static bool Contains(this string @this, string value, System.StringComparison comparisonType) { }
        public static string? NullIfEmpty(this string @this) { }
        public static string? NullIfWhiteSpace(this string @this) { }
    }
}
namespace Annex.Threading
{
    public static class CancellationTokenAnnex
    {
        public static System.Threading.CancellationToken Canceled { get; }
    }
}
namespace Annex.Time.Pollution
{
    public static class DateTimeExtensions
    {
        public static System.DateTime April(this int day, int year) { }
        public static System.DateTime August(this int day, int year) { }
        public static System.DateTime December(this int day, int year) { }
        public static System.DateTime February(this int day, int year) { }
        public static System.DateTime January(this int day, int year) { }
        public static System.DateTime July(this int day, int year) { }
        public static System.DateTime June(this int day, int year) { }
        public static System.DateTime March(this int day, int year) { }
        public static System.DateTime May(this int day, int year) { }
        public static System.DateTime November(this int day, int year) { }
        public static System.DateTime October(this int day, int year) { }
        public static System.DateTime September(this int day, int year) { }
    }
    public static class TimeSpanExtensions
    {
        public static System.TimeSpan Days(this int days) { }
        public static System.TimeSpan Hours(this int hours) { }
        public static System.TimeSpan Milliseconds(this int milliseconds) { }
        public static System.TimeSpan Minutes(this int minutes) { }
        public static System.TimeSpan Seconds(this int seconds) { }
        public static System.TimeSpan Ticks(this int ticks) { }
    }
}
namespace Annex.Uris
{
    public static class UriExtensions
    {
        public static System.Linq.ILookup<string, string> ParseQueryString(this System.Uri @this) { }
    }
}