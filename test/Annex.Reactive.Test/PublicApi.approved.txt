namespace Annex.Reactive.Linq
{
    public class static ObservableExtensions
    {
        public static System.IObservable<bool> Inverse(this System.IObservable<bool> @this) { }
        public static System.IObservable<T> RepeatAfterDelay<T>(this System.IObservable<T> @this, System.TimeSpan delay, System.Reactive.Concurrency.IScheduler scheduler) { }
        public static System.IObservable<T> SwitchIfEmpty<T>(this System.IObservable<T> @this, System.IObservable<T> switchTo) { }
        public static System.IObservable<System.Collections.Generic.IDictionary<TKey, TValue>> ToDictionary<TKey, TValue>([System.Runtime.CompilerServices.TupleElementNamesAttribute(new string[] {
                "Key",
                "Value"})] this System.IObservable<System.ValueTuple<TKey, TValue>> @this) { }
        public static System.IObservable<System.Reactive.Unit> VoidElements<T>(this System.IObservable<T> @this) { }
        public static System.IObservable<System.Reactive.Unit> VoidTerminations<T>(this System.IObservable<T> @this) { }
    }
}
namespace Annex.Reactive
{
    public class static ObservableEx
    {
        public static System.IObservable<System.Reactive.Unit> Void { get; }
        public static System.IObservable<TSource> Using<TSource, TResource>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResource>> resourceFactory, System.Func<TResource, System.IObservable<TSource>> observableFactory)
            where TResource : System.IDisposable { }
    }
}